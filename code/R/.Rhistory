max.probs <-  apply(pred.prob.val, 1, max, na.rm=TRUE) # max by row
pred.class.val <- predict(object = rf, x_val, type ="class")
sum(max.probs > 0.5)/length(max.probs)
sum(max.probs > 0.5)
length(max.probs)
df.login.y <- paste("u", y_login, sep = "")
pred.prob.kfold <- predict(gridsearch, x_login, type = 'prob')
print(apply(pred.prob.kfold, 1, max, na.rm=TRUE)) # max by row
pred.class.kfold <- predict(gridsearch, x_login)
sum(pred.class.kfold == df.login.y)/length(df.login.y)
sum(pred.class.kfold == df.login.y)
length(df.login.y)
df.val.y <- paste("u", y_val, sep = "")
pred.prob.attack.kfold <- predict(gridsearch, x_val, type = 'prob')
print(apply(pred.prob.attack.kfold, 1, max, na.rm=TRUE)) # max by row
pred.class.attack.kfold <- predict(gridsearch, x_val)
sum(pred.class.attack.kfold == df.val.y)/length(df.val.y)
sum(pred.class.attack.kfold == df.val.y)
length(df.val.y)
#install.packages('FSelectorRcpp')
pacotes <- c("tidyverse","PerformanceAnalytics", "Hmisc", "psych", "ggplot2",
"gridExtra", "moments", "goeveg", "SnowballC", "randomForest",
"caret", "stats", "lsa")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
suppressMessages(library(e1071))
# library(tidyverse)
# library(data.table)
# library(ggplot2)
# #library(cowplot)
# library(gridExtra)
# #library(plotly)
# library(moments)
# library(goeveg)
# library(PerformanceAnalytics)
# library(psych)
# library(randomForest)
# library(caret)
# library(stats)
# library(lsa)
#############
# constants #
#############
set.seed(42)
SWIPE_FILE <- 'swipeData.csv'
KEYBOARD_FILE <- 'keyboardData.csv'
SENSORS_FILE <- 'sensorsData.csv'
PATH_PARENT <- '/home/jcscabral/Studies/UspEsalq/Tcc/projeto/pesquisa/datasets/'
# All data
FILES_A <- c('20240119', '20240122_20', '20240123', '20240124',
'20240125', '20240126', '20240228', '20240310')
# Only data with correct keyboard sensors
FILES_B <- c('20240124', '20240125', '20240126', '20240228', '20240310')
KEYBOARD_LOGIN <- 5
KEYBOARD_AUTH <- 6
SWIPE_HOME <- 0
SWIPE_PIX_SEND <- 2
TYPE_ACCELEROMETER <- 1
TYPE_MAGNETIC_FIELD <- 2
TYPE_GYROSCOPE <- 4
################
# load scripts #
################
source('fix_bug_20240119.R')
source('fix_bug_20240122_20.R')
#############
# functions #
#############
# Quadratic Mean
qm <- function(x){
x.clean <- x[!is.na(x)]
r <- sqrt(sum(x.clean ^ 2)/length(x.clean))
return(r)
}
# Range
rg <- function(x){
r <-range(x, na.rm = T)
return(r[2] - r[1])
}
#Percentil
pc <- function(x, p){
x.na <- x[!is.na(x)]
q <- quantile(x.na, probs = p)
names(q) <- NULL
return(q[1])
}
#Interquartile
qt <- function(x, nq){
p <- c(0.0, 0.25, 0.5, 0.75,1 )
x.na <- x[!is.na(x)]
q <- quantile(x.na, probs = p)
names(q) <- NULL
return(q[nq + 1])
}
# Median Absolute Deviation
mi <- function(x){
# median(|Yi â€“ median(Yi|)
x.na <- x[!is.na(x)]
r <- median(abs(x.na - median(x.na)))
return(r)
}
# Standard Error of Mean
se <- function(x){
x.na <- x[!is.na(x)]
r <- sd(x.na)/sqrt(length(x.na))
return(r)
}
# max deviation
mxdv <- function(x){
x.na <- x[!is.na(x)]
r <- max(sqrt((x.na - mean(x.na))^2))
return(r)
}
# percentile fo deviation
pcdv <- function(x, p){
x.na <- x[!is.na(x)]
r <- sqrt((x.na - mean(x.na))^2)
return(pc(r, p))
}
# first
fs <- function(x){
#x.na <- x[!is.na(x)]
return(x[1])
}
# last
lt <- function(x){
#x.na <- x[!is.na(x)]
return(x[length(x)])
}
# magnitude vector
mg <- function(x, y){
r <- norm(c(x,y), type="2")
return(r)
}
# euclidian distance
ec <- function(x1, x2, y1, y2){
r <- sqrt((x2 - x1)^2 + (y2 - y1)^2)
return(r)
}
dif <- function(x){
x0 <- fs(x)
x1 <- lt(x)
return(x1 - x0)
}
ang <- function(x1, x2, y1, y2){
r <- atan2((y2 - y1), (x2 - x1))
return(r)
}
avang <- function(x, y){
y.diff <- diff(y)
x.diff <- diff(x)
tangs <- y.diff/x.diff
r <-  mean(atan(tangs))
return(r)
}
keyboard.total = NULL
for(file in FILES_B){
path_day <- paste(PATH_PARENT, file, '/', sep = '')
full_path <- paste(path_day, KEYBOARD_FILE, sep = '')
keyboard <- fread(full_path)
cnames <- c('user_id', 'action_number', 'app_action', 'pointer_event_type',
'character', 'pressure', 'x', 'y', 'uptime')
names(keyboard) <- cnames
ids_completed <- unique(keyboard[keyboard$action_number == 7]$user_id)
keyboard.completed <- keyboard %>% filter(user_id %in% ids_completed)
# it started with user_id == 51
if (file == '20240228'){
keyboard[keyboard$user_id>50]
}
if(is.null(keyboard.total)){
keyboard.total <- keyboard.completed
}
else{
keyboard.total <-rbind(keyboard.total, keyboard.completed)
}
}
keyboard <- NULL
keyboard.completed <- NULL
ids_completed <- unique(keyboard.total$user_id)
ids_completed
length(ids_completed)
keyboard
keyboard
keyboard.total = NULL
for(file in FILES_B){
path_day <- paste(PATH_PARENT, file, '/', sep = '')
full_path <- paste(path_day, KEYBOARD_FILE, sep = '')
keyboard <- fread(full_path)
cnames <- c('user_id', 'action_number', 'app_action', 'pointer_event_type',
'character', 'pressure', 'x', 'y', 'uptime')
names(keyboard) <- cnames
ids_completed <- unique(keyboard[keyboard$action_number == 7]$user_id)
keyboard.completed <- keyboard %>% filter(user_id %in% ids_completed)
# it started with user_id == 51
if (file == '20240228'){
keyboard[keyboard$user_id>50]
}
if(is.null(keyboard.total)){
keyboard.total <- keyboard.completed
}
else{
keyboard.total <-rbind(keyboard.total, keyboard.completed)
}
}
keyboard <- NULL
keyboard.completed <- NULL
ids_completed <- unique(keyboard.total$user_id)
keyboard <- keyboard.total %>% filter(user_id %in% ids_completed)
keyboard.total =  NULL
keyboard
keyboard$time_diff <- 0
keyboard$press_time_diff <- 0
keyboard$pressure_var <- 0.0
keyboard$space_x <- 0.0
keyboard$space_y <- 0.0
keyboard$velocity_x <- 0.0
keyboard$velocity_y <- 0.0
for (id in ids_completed){
id_indices <- which(keyboard$user_id == id)
current_action <- -1
for (indice in id_indices){
former_indice <- indice - 1
# app_action
if(current_action != keyboard[indice]$app_action){
keyboard[indice]$time_diff <- 0
current_action <- keyboard[indice]$app_action
} else{
keyboard[indice]$time_diff <- diff(
keyboard[former_indice:indice]$uptime)
}
# event_type_pointer
current_event_type <- keyboard[indice]$pointer_event_type
if (current_event_type == 1){
keyboard[indice]$press_time_diff <- 0
keyboard[indice]$pressure_var <- 0.0
keyboard[indice]$velocity_x <- 0.0
keyboard[indice]$velocity_y <- 0.0
} else {
keyboard[indice]$press_time_diff <- diff(
keyboard[former_indice:indice]$uptime)
keyboard[indice]$pressure_var <- diff(
keyboard[former_indice:indice]$pressure) /
keyboard[indice]$press_time_diff
keyboard[indice]$space_x <- diff(keyboard[former_indice:indice]$x)
keyboard[indice]$space_y <- diff(keyboard[former_indice:indice]$y)
keyboard[indice]$velocity_x <- diff(
keyboard[former_indice:indice]$space_x)/
keyboard[indice]$press_time_diff
keyboard[indice]$velocity_y <- diff(
keyboard[former_indice:indice]$space_y)/
keyboard[indice]$press_time_diff
}
}
}
# card stats function
cardStats <- function(dfdata, digit){
card_stats <- dfdata %>%
filter(character == digit) %>%
mutate(
fly_time = ifelse(pointer_event_type == 1, time_diff, NA) ,
dwell_time = ifelse(pointer_event_type != 1, press_time_diff, NA) ,
) %>%
summarise(
# DT Dwelling Time
dt_md = median(dwell_time, na.rm = T),
dt_fq = qt(dwell_time, 1),
dt_tq = qt(dwell_time, 3),
dt_ir = IQR(dwell_time, na.rm = T),
dt_ma = mean(dwell_time, na.rm = T),
dt_vr = var(dwell_time, na.rm = T),
dt_sd = sd(dwell_time, na.rm = T),
dt_cv = cv(dwell_time, na.rm = T),
dt_se = se(dwell_time),
dt_mn = min(dwell_time, na.rm = T) ,
dt_mx = max(dwell_time, na.rm = T) ,
dt_qm = qm(dwell_time) ,
dt_rg = rg(dwell_time) ,
dt_sk = skewness(dwell_time) ,
dt_ku = kurtosis(dwell_time) ,
# FT Flight Time
ft_md = median(fly_time, na.rm = T),
ft_fq = qt(fly_time, 1),
ft_tq = qt(fly_time, 3),
ft_ir = IQR(fly_time, na.rm = T),
ft_am = mean(fly_time, na.rm = T),
ft_vr = var(fly_time, na.rm = T),
ft_sd = sd(fly_time, na.rm = T),
ft_cv = cv(fly_time, na.rm = T),
ft_se = se(fly_time),
ft_mn = min(fly_time , na.rm = T) ,
ft_mx = max(fly_time, na.rm = T) ,
dt_qm = qm(fly_time) ,
ft_rg = rg(fly_time) ,
ft_sk = skewness(fly_time) ,
ft_ku = kurtosis(fly_time) ,
# Pressure
ps_md = median(pressure),
ps_fq = qt(pressure, 1),
ps_tq = qt(pressure, 3),
ps_ir = IQR(pressure, na.rm = T),
ps_am = mean(pressure, na.rm = T),
ps_var = var(pressure, na.rm = T),
ps_sd = sd(pressure, na.rm = T),
ps_cv = cv(pressure, na.rm = T),
ps_se = se(pressure),
ps_mn = min(pressure),
ps_mx = max(pressure),
ps_qm = qm(pressure) ,
ps_rg = rg(pressure) ,
ps_sk = skewness(pressure) ,
ps_ku = kurtosis(pressure) ,
# Spacial x
x_md = median(x, na.rm = T),
x_fq = qt(x, 1),
x_tq = qt(x, 3),
x_ir = IQR(x, na.rm = T),
x_am = mean(x, na.rm = T),
x_vr = var(x, na.rm = T),
x_sd = sd(x, na.rm = T),
x_cv = cv(x, na.rm = T),
x_se = se(x),
x_mn = min(x, na.rm = T) ,
x_mx = max(x, na.rm = T) ,
x_qm = qm(x) ,
x_rg = rg(x),
x_sk =  skewness(x) ,
x_ku = kurtosis(x) ,
# Spacial y
y_md = median(y, na.rm = T),
y_fq = qt(y, 1),
y_tq = qt(y, 3),
y_ir = IQR(y, na.rm = T),
y_am = mean(y, na.rm = T),
y_vr = var(y),
y_sd = sd(y, na.rm = T),
y_cv = cv(y, na.rm = T),
y_se = se(y),
y_mn = min(y, na.rm = T) ,
y_mx = max(y, na.rm = T) ,
y_qm = qm(y),
y_rg =  rg(y) ,
y_sk =  skewness(y) ,
y_ku = kurtosis(y)
)
return(card_stats)
}
# 15 * 5 * 8 features
# Renaming functions ####
col_char5 <- function(x){
return(paste(x, "_5", '', sep= ''))
}
col_char4 <- function(x){
return(paste(x, "_4", '', sep= ''))
}
col_char8 <- function(x){
return(paste(x, "_8", '', sep= ''))
}
col_char3 <- function(x){
return(paste(x, "_3", '', sep= ''))
}
col_char1 <- function(x){
return(paste(x, "_1", '', sep= ''))
}
col_char7 <- function(x){
return(paste(x, "_7", '', sep= ''))
}
col_char9 <- function(x){
return(paste(x, "_9", '', sep= ''))
}
col_char0 <- function(x){
return(paste(x, "_0", '', sep= ''))
}
keyboard_login <- keyboard %>%
filter(app_action == 5 | app_action == 6)
# base <- keyboard_login %>%
#   group_by(user_id, character)
# function #
# data grouped by param
getDescChars <- function(dbase, secao = T){
groupby <- c("user_id")
ini.range <- 3
if (secao == T){
groupby <- c("user_id","action_number")
ini.range <- 4
}
desc_login_char_5 <- cardStats(dbase, 5)
desc_login_char_4 <- cardStats(dbase, 4)
desc_login_char_8 <- cardStats(dbase, 8)
desc_login_char_3 <- cardStats(dbase, 3)
desc_login_char_1 <- cardStats(dbase, 1)
desc_login_char_7 <- cardStats(dbase, 7)
desc_login_char_9 <- cardStats(dbase, 9)
desc_login_char_0 <- cardStats(dbase, 0)
col.names <- names(desc_login_char_5)
col.names <- col.names[ini.range:length(col.names)]
desc_login_char_5 <- desc_login_char_5 %>%
rename_with(.fn = col_char5, .cols = col.names)
desc_login_char_4 <- desc_login_char_4 %>%
rename_with(.fn = col_char4, .cols = col.names)
desc_login_char_8 <- desc_login_char_8 %>%
rename_with(.fn = col_char8, .cols = col.names)
desc_login_char_3 <- desc_login_char_3 %>%
rename_with(.fn = col_char3, .cols = col.names)
desc_login_char_1 <- desc_login_char_1 %>%
rename_with(.fn = col_char1, .cols = col.names)
desc_login_char_7 <- desc_login_char_7 %>%
rename_with(.fn = col_char7, .cols = col.names)
desc_login_char_9 <- desc_login_char_9 %>%
rename_with(.fn = col_char9, .cols = col.names)
desc_login_char_0 <- desc_login_char_0 %>%
rename_with(.fn = col_char0, .cols = col.names)
desc_login_chars <- inner_join(
desc_login_char_5, desc_login_char_4, by = groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_8, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_3, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_1, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_7, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_9, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
desc_login_chars <- inner_join(
desc_login_chars, desc_login_char_0, by= groupby)
desc_login_chars$character.x <- NULL
desc_login_chars$character.y <- NULL
return(desc_login_chars)
}
getCardTemplate <- function(dbase, cols.ranked = NULL ){
threshold <- length(ids_completed)/ (ncol(dbase) - 1)
if (is.null(cols.ranked)){
cols.not.na <-names(
which(colSums(is.na(dbase)) == 0)
)
card_chars <- dbase[cols.not.na]
# same weka result
result <- FSelectorRcpp::information_gain(
formula = user_id ~ .,
data = card_chars ,
type = 'infogain'
)
cols_ranked  <- result %>%
filter(importance >= threshold) %>% select(attributes)
cols_ranked <- c("user_id", as_vector(cols_ranked))
}
else{
cols_ranked <- cols.ranked
card_chars <- dbase[cols_ranked]
card_chars[is.na(card_chars)] <- 0.0
}
card_chars_ranked <- card_chars[cols_ranked]
results <- list("cols" = cols_ranked, "card" = card_chars_ranked)
return(results)
}
View(keyboard)
sensors.total = NULL
for(file in FILES_B){
path_day <- paste(PATH_PARENT, file, '/', sep = '')
# sensors #
full_path <- paste(path_day, SENSORS_FILE, sep = '')
sensors <- fread(full_path)
cnames <- c('user_id', 'action_number', 'app_action', 'sensor_type',
'x', 'y', 'z', 'timestamp')
names(sensors) <- cnames
ids_completed <- unique(sensors[sensors$action_number == 7]$user_id)
sensors.completed <- sensors %>% filter(user_id %in% ids_completed)
if(is.null(sensors.total)){
sensors.total <- sensors.completed
}
else{
sensors.total <-rbind(sensors.total, sensors.completed)
}
}
sensors <- NULL
sensors.completed <- NULL
ids_completed <- unique(sensors.total$user_id)
ids_completed <- ids_completed[ids_completed!=33]
# except id 33, 2024/1/23
length(ids_completed) # 18
sensors <- sensors.total %>% filter(user_id %in% ids_completed)
sensors.total =  NULL
sensors$timestamp <- sensors$timestamp / 1000000
# no longer, unfortunately
#sensors <- rbind(sensors, sensor_data_20240119())
#sensors <- rbind(sensors, sensor_data_20240122_20())
# sensors.wrong <-sensor_data_20240122_20()
ids_completed <- sort(unique(sensors$user_id))
# magnitude vector
sensors$w <- sqrt((sensors$x^2) + (sensors$y^2) + (sensors$z^2))
View(sensors)
sensors.login <- sensors %>% filter(
app_action %in% c(KEYBOARD_LOGIN, KEYBOARD_AUTH))
