pc_var = info.perc)
)
card.train <- keyboard.stats
num_variables <- length(info.cols) -1
##############
# II - login #
##############
keyboard.login <- keyboard.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, character, action_number)
keyboard.login.stats <- getCharStats(keyboard.login)
keyboard.login.stats <- keyboard.login.stats[
c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.login.grouped <- sensors.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, action_number)
sensors.login.stats <- sensorStats(sensor.login.grouped)
sensors.login.stats <- sensors.login.stats[info.sensor.cols]
keyboard.login.stats <- bind_cols(keyboard.login.stats,
sensors.login.stats)
}
card.login <- keyboard.login.stats
####################
# III - validation #
####################
keyboard.val <- keyboard_login %>%
filter(user_id %in% ids.val)
if (USE_SENSOR_DATA == T){
sensors.val <- sensors.login %>%
filter(user_id %in% ids.val)
}
keyboard.val.grouped <- keyboard.val %>%
group_by(user_id, character, action_number)
keyboard.val.stats <- getCharStats(keyboard.val.grouped, secao = T)
keyboard.val.stats <- keyboard.val.stats[c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.val.grouped <- sensors.val %>% group_by(user_id, action_number)
sensors.val.stats <- sensorStats(sensor.val.grouped)
sensors.val.stats <- sensors.val.stats[info.sensor.cols]
keyboard.val.stats <- bind_cols(keyboard.val.stats, sensors.val.stats)
}
card.val <- keyboard.val.stats
###############
### TRAIN #####
###############
x_train <- card.train[,-1]
y_train <- as.factor(card.train$user_id)
x_login <- card.login[,-1]
y_login <- as.factor(card.login$user_id)
x_val <- card.val[,-1]
y_val <- as.factor(card.val$user_id)
# randomForest class w/ 5 sections
rf <- randomForest(
x_train,
y_train,
importance = T)
# with k-fold
df.train <- card.train
df.train$user_id <- paste("u", df.train$user_id, sep = "")
control <- trainControl(method = "repeatedcv",
number = 10 ,
repeats = 2,
search = "grid",
classProbs = T)
gridsearch <- train(
user_id ~ .,
data = df.train ,
method = 'rf',
ntree = 100,
trControl = control
)
for (cutoff in CUTOFFS){
# I. login try
pred.class.login <- predict(object = rf, x_login, type ="class")
login_pos <- sum(pred.class.login == y_login)
login_neg <- sum(pred.class.login != y_login)
pred.prob.login <- predict(object = rf, x_login, type ="prob")
max.probs.login <- apply(pred.prob.login, 1, max)
matched <- pred.class.login == y_login
login_pos_prob <- sum(matched[max.probs.login> cutoff])
login_neg_prob <- length(pred.class.login) - login_pos_prob
# II. attack try
pred.prob.val <- predict(object = rf, x_val, type ="prob")
max.probs <- apply(pred.prob.val, 1, max, na.rm=TRUE)
attack_pos <- sum(max.probs > cutoff)
attack_neg <- length(max.probs) - attack_pos
# II. gridsearch
# login
df.login.y <- paste("u", y_login, sep = "")
pred.class.kfold <- predict(gridsearch, x_login)
grd_login_pos <- sum(pred.class.kfold == df.login.y)
grd_login_neg <- sum(pred.class.kfold != df.login.y)
grd_login_acc <- grd_login_pos / length(df.login.y)
pred.prob.kfold <- predict(gridsearch, x_login, type = 'prob')
max.probs.login.kfold <- apply(pred.prob.kfold, 1, max, na.rm=TRUE)
matched.kfold <- pred.class.kfold == df.login.y
grd_login_pos_prob <- sum(matched.kfold[max.probs.login.kfold> cutoff])
grd_login_neg_prob <- length(df.login.y) - grd_login_pos_prob
# attack
pred.prob.attack.kfold <- predict(gridsearch, x_val, type = 'prob')
max.probs.kfold <- apply(pred.prob.attack.kfold, 1, max, na.rm=TRUE) # max by row
grd_attack_pos <- sum(max.probs.kfold > cutoff)
grd_attack_neg <- length(max.probs.kfold) - grd_attack_pos
df.results[row,] <- c(pc_train, iter, num_users,
num_attackers,
num_variables,
cutoff,
login_pos,
login_neg,
login_pos_prob,
login_neg_prob,
attack_pos,
attack_neg,
grd_login_pos,
grd_login_neg,
grd_login_pos_prob,
grd_login_neg_prob,
grd_attack_pos,
grd_attack_neg
)
row <- row + 1
}
}
}
write.csv(df.results,'result32-key')
USE_SENSOR_DATA <-T
USE_SENSOR_DATA <-T
if (USE_SENSOR_DATA == T){
sensors.login <- loadSensorsLogin()
}
sensors.login
View(sensors.login)
for (pc_train in percents){
# iter
# 0: train/test:[1-5], val:6
# 1: train/test:[1-5], val:7
for (iter in iters){
# split train and attack's validation
session_start <- 1 + iter
session_end <- NUM_SESSIONS + iter
ind <- round(length(ids) * pc_train)
ids.train <-ids[1:ind]
ids.val <-ids[(ind+1):length(ids)]
num_users <- length(ids.train)
num_attackers <- length(ids.val)
##########################
# I- template (training) #
##########################
keyboard.train <- keyboard_login %>%
filter(user_id %in% ids.train)
if (USE_SENSOR_DATA == T){
sensors.train <- sensors.login  %>%
filter(user_id %in% ids.train)
}
keyboard.grouped <- keyboard.train %>%
filter(action_number >= session_start,
action_number <= session_end) %>%
group_by(user_id, character, action_number)
keyboard.stats <- getCharStats(keyboard.grouped)
#info.keyboard.cols <- infoGainCols(keyboard.stats)
info.gaing <- infoGainCols(keyboard.stats)
info.keyboard.cols <- info.gaing["cols_ranked"]$cols_ranked
info.keyboard.perc <- info.gaing["cols_perc"]$cols_perc
keyboard.stats <- keyboard.stats[c("user_id", info.keyboard.cols)]
info.cols <- info.keyboard.cols
info.perc <- info.keyboard.perc
info.sensor.cols = NULL
if (USE_SENSOR_DATA == T){
sensors.train.grouped <- sensors.train %>%
filter(action_number >= session_start,
action_number <= session_end) %>%
group_by(user_id, action_number)
sensors.stats <- sensorStats(sensors.train.grouped)
#info.sensor.cols <- infoGainCols(sensors.stats)
info.gaing <- infoGainCols(sensors.stats)
info.sensor.cols <- info.gaing["cols_ranked"]$cols_ranked
info.sensor.perc <- info.gaing["cols_perc"]$cols_perc
sensors.stats <- sensors.stats[info.sensor.cols]
keyboard.stats <- bind_cols(keyboard.stats, sensors.stats)
info.cols <- c(info.cols, info.sensor.cols)
info.perc <-c(info.perc, info.sensor.perc)
}
df.variables <- rbind(
df.variables,
data.frame(
iter = row,
no_var = info.cols,
pc_var = info.perc)
)
card.train <- keyboard.stats
num_variables <- length(info.cols) -1
##############
# II - login #
##############
keyboard.login <- keyboard.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, character, action_number)
keyboard.login.stats <- getCharStats(keyboard.login)
keyboard.login.stats <- keyboard.login.stats[
c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.login.grouped <- sensors.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, action_number)
sensors.login.stats <- sensorStats(sensor.login.grouped)
sensors.login.stats <- sensors.login.stats[info.sensor.cols]
keyboard.login.stats <- bind_cols(keyboard.login.stats,
sensors.login.stats)
}
card.login <- keyboard.login.stats
####################
# III - validation #
####################
keyboard.val <- keyboard_login %>%
filter(user_id %in% ids.val)
if (USE_SENSOR_DATA == T){
sensors.val <- sensors.login %>%
filter(user_id %in% ids.val)
}
keyboard.val.grouped <- keyboard.val %>%
group_by(user_id, character, action_number)
keyboard.val.stats <- getCharStats(keyboard.val.grouped, secao = T)
keyboard.val.stats <- keyboard.val.stats[c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.val.grouped <- sensors.val %>% group_by(user_id, action_number)
sensors.val.stats <- sensorStats(sensor.val.grouped)
sensors.val.stats <- sensors.val.stats[info.sensor.cols]
keyboard.val.stats <- bind_cols(keyboard.val.stats, sensors.val.stats)
}
card.val <- keyboard.val.stats
###############
### TRAIN #####
###############
x_train <- card.train[,-1]
y_train <- as.factor(card.train$user_id)
x_login <- card.login[,-1]
y_login <- as.factor(card.login$user_id)
x_val <- card.val[,-1]
y_val <- as.factor(card.val$user_id)
# randomForest class w/ 5 sections
rf <- randomForest(
x_train,
y_train,
importance = T)
# with k-fold
df.train <- card.train
df.train$user_id <- paste("u", df.train$user_id, sep = "")
control <- trainControl(method = "repeatedcv",
number = 10 ,
repeats = 2,
search = "grid",
classProbs = T)
gridsearch <- train(
user_id ~ .,
data = df.train ,
method = 'rf',
ntree = 100,
trControl = control
)
for (cutoff in CUTOFFS){
# I. login try
pred.class.login <- predict(object = rf, x_login, type ="class")
login_pos <- sum(pred.class.login == y_login)
login_neg <- sum(pred.class.login != y_login)
pred.prob.login <- predict(object = rf, x_login, type ="prob")
max.probs.login <- apply(pred.prob.login, 1, max)
matched <- pred.class.login == y_login
login_pos_prob <- sum(matched[max.probs.login> cutoff])
login_neg_prob <- length(pred.class.login) - login_pos_prob
# II. attack try
pred.prob.val <- predict(object = rf, x_val, type ="prob")
max.probs <- apply(pred.prob.val, 1, max, na.rm=TRUE)
attack_pos <- sum(max.probs > cutoff)
attack_neg <- length(max.probs) - attack_pos
# II. gridsearch
# login
df.login.y <- paste("u", y_login, sep = "")
pred.class.kfold <- predict(gridsearch, x_login)
grd_login_pos <- sum(pred.class.kfold == df.login.y)
grd_login_neg <- sum(pred.class.kfold != df.login.y)
grd_login_acc <- grd_login_pos / length(df.login.y)
pred.prob.kfold <- predict(gridsearch, x_login, type = 'prob')
max.probs.login.kfold <- apply(pred.prob.kfold, 1, max, na.rm=TRUE)
matched.kfold <- pred.class.kfold == df.login.y
grd_login_pos_prob <- sum(matched.kfold[max.probs.login.kfold> cutoff])
grd_login_neg_prob <- length(df.login.y) - grd_login_pos_prob
# attack
pred.prob.attack.kfold <- predict(gridsearch, x_val, type = 'prob')
max.probs.kfold <- apply(pred.prob.attack.kfold, 1, max, na.rm=TRUE) # max by row
grd_attack_pos <- sum(max.probs.kfold > cutoff)
grd_attack_neg <- length(max.probs.kfold) - grd_attack_pos
df.results[row,] <- c(pc_train, iter, num_users,
num_attackers,
num_variables,
cutoff,
login_pos,
login_neg,
login_pos_prob,
login_neg_prob,
attack_pos,
attack_neg,
grd_login_pos,
grd_login_neg,
grd_login_pos_prob,
grd_login_neg_prob,
grd_attack_pos,
grd_attack_neg
)
row <- row + 1
}
}
}
write.csv(df.results,'result32-key-sens')
max.probs
x_val
View(x_val)
View(x_val)
View(keyboard.val.grouped)
View(card.val)
ids
ids <- sample(ids_completed)
ids
PC_30 <- 0.3
PC_50 <- 0.5
PC_70 <- 0.7
PC_90 <- 0.9
CUTOFFS <- c(0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5)
percents <-c(PC_30, PC_50, PC_70, PC_90)
iters <- c(0,1)
row <- 1
for (pc_train in percents){
# iter
# 0: train/test:[1-5], val:6
# 1: train/test:[1-5], val:7
for (iter in iters){
# split train and attack's validation
session_start <- 1 + iter
session_end <- NUM_SESSIONS + iter
ind <- round(length(ids) * pc_train)
ids.train <-ids[1:ind]
ids.val <-ids[(ind+1):length(ids)]
num_users <- length(ids.train)
num_attackers <- length(ids.val)
##########################
# I- template (training) #
##########################
keyboard.train <- keyboard_login %>%
filter(user_id %in% ids.train)
if (USE_SENSOR_DATA == T){
sensors.train <- sensors.login  %>%
filter(user_id %in% ids.train)
}
keyboard.grouped <- keyboard.train %>%
filter(action_number >= session_start,
action_number <= session_end) %>%
group_by(user_id, character, action_number)
keyboard.stats <- getCharStats(keyboard.grouped)
#info.keyboard.cols <- infoGainCols(keyboard.stats)
info.gaing <- infoGainCols(keyboard.stats)
info.keyboard.cols <- info.gaing["cols_ranked"]$cols_ranked
info.keyboard.perc <- info.gaing["cols_perc"]$cols_perc
keyboard.stats <- keyboard.stats[c("user_id", info.keyboard.cols)]
info.cols <- info.keyboard.cols
info.perc <- info.keyboard.perc
info.sensor.cols = NULL
if (USE_SENSOR_DATA == T){
sensors.train.grouped <- sensors.train %>%
filter(action_number >= session_start,
action_number <= session_end) %>%
group_by(user_id, action_number)
sensors.stats <- sensorStats(sensors.train.grouped)
#info.sensor.cols <- infoGainCols(sensors.stats)
info.gaing <- infoGainCols(sensors.stats)
info.sensor.cols <- info.gaing["cols_ranked"]$cols_ranked
info.sensor.perc <- info.gaing["cols_perc"]$cols_perc
sensors.stats <- sensors.stats[info.sensor.cols]
keyboard.stats <- bind_cols(keyboard.stats, sensors.stats)
info.cols <- c(info.cols, info.sensor.cols)
info.perc <-c(info.perc, info.sensor.perc)
}
df.variables <- rbind(
df.variables,
data.frame(
iter = row,
no_var = info.cols,
pc_var = info.perc)
)
card.train <- keyboard.stats
num_variables <- length(info.cols) -1
##############
# II - login #
##############
keyboard.login <- keyboard.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, character, action_number)
keyboard.login.stats <- getCharStats(keyboard.login)
keyboard.login.stats <- keyboard.login.stats[
c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.login.grouped <- sensors.train %>%
filter(action_number == session_end + 1) %>%
group_by(user_id, action_number)
sensors.login.stats <- sensorStats(sensor.login.grouped)
sensors.login.stats <- sensors.login.stats[info.sensor.cols]
keyboard.login.stats <- bind_cols(keyboard.login.stats,
sensors.login.stats)
}
card.login <- keyboard.login.stats
####################
# III - validation #
####################
keyboard.val <- keyboard_login %>%
filter(user_id %in% ids.val)
if (USE_SENSOR_DATA == T){
sensors.val <- sensors.login %>%
filter(user_id %in% ids.val)
}
keyboard.val.grouped <- keyboard.val %>%
group_by(user_id, character, action_number)
keyboard.val.stats <- getCharStats(keyboard.val.grouped, secao = T)
keyboard.val.stats <- keyboard.val.stats[c("user_id", info.keyboard.cols)]
if (USE_SENSOR_DATA == T){
sensor.val.grouped <- sensors.val %>% group_by(user_id, action_number)
sensors.val.stats <- sensorStats(sensor.val.grouped)
sensors.val.stats <- sensors.val.stats[info.sensor.cols]
keyboard.val.stats <- bind_cols(keyboard.val.stats, sensors.val.stats)
}
card.val <- keyboard.val.stats
###############
### TRAIN #####
###############
x_train <- card.train[,-1]
y_train <- as.factor(card.train$user_id)
x_login <- card.login[,-1]
y_login <- as.factor(card.login$user_id)
x_val <- card.val[,-1]
y_val <- as.factor(card.val$user_id)
# randomForest class w/ 5 sections
rf <- randomForest(
x_train,
y_train,
importance = T)
# with k-fold
df.train <- card.train
df.train$user_id <- paste("u", df.train$user_id, sep = "")
control <- trainControl(method = "repeatedcv",
number = 10 ,
repeats = 2,
search = "grid",
classProbs = T)
gridsearch <- train(
user_id ~ .,
data = df.train ,
method = 'rf',
ntree = 100,
trControl = control
)
for (cutoff in CUTOFFS){
# I. login try
pred.class.login <- predict(object = rf, x_login, type ="class")
login_pos <- sum(pred.class.login == y_login)
login_neg <- sum(pred.class.login != y_login)
pred.prob.login <- predict(object = rf, x_login, type ="prob")
max.probs.login <- apply(pred.prob.login, 1, max)
matched <- pred.class.login == y_login
login_pos_prob <- sum(matched[max.probs.login> cutoff])
login_neg_prob <- length(pred.class.login) - login_pos_prob
# II. attack try
pred.prob.val <- predict(object = rf, x_val, type ="prob")
max.probs <- apply(pred.prob.val, 1, max, na.rm=TRUE)
attack_pos <- sum(max.probs > cutoff)
attack_neg <- length(max.probs) - attack_pos
# II. gridsearch
# login
df.login.y <- paste("u", y_login, sep = "")
pred.class.kfold <- predict(gridsearch, x_login)
grd_login_pos <- sum(pred.class.kfold == df.login.y)
grd_login_neg <- sum(pred.class.kfold != df.login.y)
grd_login_acc <- grd_login_pos / length(df.login.y)
pred.prob.kfold <- predict(gridsearch, x_login, type = 'prob')
max.probs.login.kfold <- apply(pred.prob.kfold, 1, max, na.rm=TRUE)
matched.kfold <- pred.class.kfold == df.login.y
grd_login_pos_prob <- sum(matched.kfold[max.probs.login.kfold> cutoff])
grd_login_neg_prob <- length(df.login.y) - grd_login_pos_prob
# attack
pred.prob.attack.kfold <- predict(gridsearch, x_val, type = 'prob')
max.probs.kfold <- apply(pred.prob.attack.kfold, 1, max, na.rm=TRUE) # max by row
grd_attack_pos <- sum(max.probs.kfold > cutoff)
grd_attack_neg <- length(max.probs.kfold) - grd_attack_pos
df.results[row,] <- c(pc_train, iter, num_users,
num_attackers,
num_variables,
cutoff,
login_pos,
login_neg,
login_pos_prob,
login_neg_prob,
attack_pos,
attack_neg,
grd_login_pos,
grd_login_neg,
grd_login_pos_prob,
grd_login_neg_prob,
grd_attack_pos,
grd_attack_neg
)
row <- row + 1
}
}
}
View(df.results)
